package org.jboss.shrinkwrap.descriptor.metadata.codegen;

import org.jboss.shrinkwrap.descriptor.metadata.Metadata;
import org.jboss.shrinkwrap.descriptor.metadata.MetadataElement;

import com.sun.codemodel.JDefinedClass;

public class TextTypeBuilder {

    private static final String[] SEARCH_LIST = new String[] { "DATATYPE", "ELEMENTNAME_P", "ELEMENTNAME_O", "CLASSNAME_P" };

    private static final String SET_TEXT_TYPE = "\n"
        + "     /**\n"
        + "      * Sets the body text for the element <code>ELEMENTNAME_O</code> \n"
        + "      * @param CLASSNAME_P the value for the body text <code>ELEMENTNAME_O</code> \n"
        + "      * @return the current instance of <code>CLASSNAME_P</code> \n"
        + "      */\n"
        + "     public CLASSNAME_P text(String value) {\n"
        + "         getNode().text(value);\n"
        + "         return this;\n"
        + "     }\n";

    private static final String GET_TEXT_TYPE = "\n"
        + "     /**\n"
        + "      * Returns the body text of the element <code>ELEMENTNAME_O</code> \n"
        + "      * @return the value defined for the text <code>ELEMENTNAME_O</code> \n"
        + "      */\n"
        + "     public String getText() {\n"
        + "         return getNode().getText();\n"
        + "     }\n";

    private static final String[] METHOD_LIST_TEXT = new String[] {
        SET_TEXT_TYPE,
        GET_TEXT_TYPE,
    };

    public static void addTextTypeMethods(final JDefinedClass clazz, final Metadata metadata, final MetadataElement element, final String className, final boolean isApi) throws Exception {
        generateImpl(clazz, className, metadata, element, isApi);
    }

    //-----------------------------------------------------------------------||
    //--Private Methods -----------------------------------------------------||
    //-----------------------------------------------------------------------||

    private static void generateImpl(final JDefinedClass clazz, final String className, final Metadata metadata, final MetadataElement element, final boolean isApi) throws Exception {
        final String elementName = BuilderUtil.checkReservedWords(CodeGen.getCamelCase(element.getName()));
        final Class<?> dataType = BuilderUtil.getDataType(element.getType());
        final String[] replaceList = getReplaceList(dataType, className, elementName);
        clazz.direct(element.asClassComment());
        clazz.direct("    // generated by TextTypeBuilder:" + dataType);
        for (String methodBody : METHOD_LIST_TEXT) {
            clazz.direct(BuilderUtil.replaceAll(methodBody, isApi, SEARCH_LIST, replaceList));
        }
    }

    private static String[] getReplaceList(final Class<?> dataType, final String className, final String elementName) {
        return new String[] {dataType.getSimpleName(), CodeGen.getPascalizeCase(elementName), elementName, className};
    }

}
