package org.jboss.shrinkwrap.descriptor.metadata.codegen;

import org.jboss.shrinkwrap.descriptor.metadata.MetadataElement;

import com.sun.codemodel.JDefinedClass;

public class BooleanTypeBuilder {

    private static final String[] SEARCH_LIST = new String[] { "DATATYPE", "ELEMENTNAME_P", "ELEMENTNAME_C", "CLASSNAME_P", "ELEMENTNAME_O" };

    private static final String SET_EMTPY_BOOLEAN_TYPE = "\n"
        + "    /**\n"
        + "     * Sets the <code>ELEMENTNAME_O</code> element\n"
        + "     * @param ELEMENTNAME_C the value for the element <code>ELEMENTNAME_O</code> \n"
        + "     * @return the current instance of <code>ELEMENTNAME_C</code> \n"
        + "     */\n"
        + "    public CLASSNAME_P ELEMENTNAME_C(Boolean ELEMENTNAME_C) {\n"
        + "        getNode().getOrCreate(\"ELEMENTNAME_O\").text(ELEMENTNAME_C);\n"
        + "        return this;\n"
        + "    }\n";

    private static final String GET_EMTPY_BOOLEAN_TYPE = "\n"
        + "    /**\n"
        + "     * Returns the <code>ELEMENTNAME_O</code> element\n"
        + "     * @return true, if set, otherwise false\n"
        + "     */\n"
        + "    public Boolean isELEMENTNAME_P() {\n"
        + "        return Strings.isTrue(getNode().getTextValueForPatternName(\"ELEMENTNAME_O\"));\n"
        + "    }\n";

    private static final String REM_EMTPY_BOOLEAN_TYPE = "\n"
        + "    /**\n"
        + "     * Removes the <code>ELEMENTNAME_O</code> element \n"
        + "     * @return the current instance of <code>ELEMENTNAME_P</code> \n"
        + "     */\n"
        + "    public LicenseType removeELEMENTNAME_P() {\n"
        + "        getNode().removeChildren(\"ELEMENTNAME_O\");\n"
        + "        return this;\n"
        + "    }\n";

    private static final String[] METHOD_LIST_EMPTY_BOOLEAN_TYPE = new String[] {
        SET_EMTPY_BOOLEAN_TYPE,
        GET_EMTPY_BOOLEAN_TYPE,
        REM_EMTPY_BOOLEAN_TYPE,
    };

    public static void addAttributeMethods(final JDefinedClass clazz, final MetadataElement element, final String className, final boolean isApi) throws Exception {
        generateImpl(clazz, className, element, isApi);
    }

    //-----------------------------------------------------------------------||
    //--Private Methods -----------------------------------------------------||
    //-----------------------------------------------------------------------||

    private static void generateImpl(final JDefinedClass clazz, final String className, final MetadataElement element, final boolean isApi) throws Exception {
        if (element.getIsAttribute()) {
            final String elementName_c = BuilderUtil.checkReservedWords(CodeGen.getCamelCase(element.getName()));
            final Class<?> dataType = BuilderUtil.getDataType(element.getType());
            final String[] replaceList = getReplaceList(dataType, className, elementName_c, element.getName());
            clazz.direct(element.asClassComment());
            clazz.direct("    // generated by EmptyBooleanTypeBuilder: " + dataType);
            for (String methodBody : METHOD_LIST_EMPTY_BOOLEAN_TYPE) {
                clazz.direct(BuilderUtil.replaceAll(methodBody, isApi, SEARCH_LIST, replaceList));
            }
        }
    }

    private static String[] getReplaceList(final Class<?> dataType, final String className, final String elementName_c, final String elementName) {
        return new String[] {dataType.getSimpleName(), CodeGen.getPascalizeCase(elementName), elementName_c, className, elementName};
    }

}
